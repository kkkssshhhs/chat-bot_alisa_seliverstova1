import telebot
from telebot import types
import json
import re
from datetime import datetime

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('YOUR_TELEGRAM_BOT_TOKEN')

# –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å —Å —Å–∞–π—Ç–∞)
programs_data = {
    "ai": {
        "name": "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
        "institute": "–ò–Ω—Å—Ç–∏—Ç—É—Ç –ø—Ä–∏–∫–ª–∞–¥–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫",
        "form": "–æ—á–Ω–∞—è",
        "duration": "2 –≥–æ–¥–∞",
        "language": "—Ä—É—Å—Å–∫–∏–π",
        "price": "599 000 ‚ÇΩ –≤ –≥–æ–¥",
        "dormitory": "–¥–∞",
        "military_center": "–¥–∞",
        "accreditation": "–¥–∞",
        "features": "–û–Ω–ª–∞–π–Ω, –¢—Ä–µ–∫ –∞—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä—ã, –ü–ò–®, –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤ —Å—Ñ–µ—Ä–µ –ò–ò",
        "manager": {
            "name": "–ï–ª–∏–∑–∞–≤–µ—Ç–∞ –í–∏—Ç–∞–ª—å–µ–≤–Ω–∞ –í–∞—Å–∏–ª–µ–Ω–∫–æ",
            "email": "aitalents@itmo.ru",
            "phone": "+7 (999) 526-79-88"
        },
        "exam_dates": ["18.08.2025, 11:00", "19.08.2025, 11:00", "21.08.2025, 11:00", "26.08.2025, 11:00", "27.08.2025, 11:00"],
        "specialties": {
            "09.04.01": {
                "name": "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞",
                "budget": 51,
                "target": 4,
                "contract": 55
            },
            "11.04.02": {
                "name": "–ò–Ω—Ñ–æ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Å–∏—Å—Ç–µ–º—ã —Å–≤—è–∑–∏",
                "budget": 80,
                "target": 5,
                "contract": 25
            },
            "27.04.05": {
                "name": "–ò–Ω–Ω–æ–≤–∞—Ç–∏–∫–∞",
                "budget": 80,
                "target": 5,
                "contract": 40
            }
        }
    },
    "ai_product": {
        "name": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏/AI Product",
        "institute": "–ò–Ω—Å—Ç–∏—Ç—É—Ç –ø—Ä–∏–∫–ª–∞–¥–Ω—ã—Ö –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫",
        "form": "–æ—á–Ω–∞—è",
        "duration": "2 –≥–æ–¥–∞",
        "language": "—Ä—É—Å—Å–∫–∏–π",
        "price": "599 000 ‚ÇΩ –≤ –≥–æ–¥",
        "dormitory": "–¥–∞",
        "military_center": "–¥–∞",
        "accreditation": "–¥–∞",
        "features": "–°–û–ü, –ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤ —Å—Ñ–µ—Ä–µ –ò–ò",
        "manager": {
            "name": "–†–µ–≥–∏–Ω–∞ –ò–ª—å–¥–∞—Ä–æ–≤–Ω–∞ –ê–±–¥—Ä–∞—à–∏—Ç–æ–≤–∞",
            "email": "aiproduct@itmo.ru",
            "phone": "+7 (993) 639-86-77"
        },
        "exam_dates": ["15.08.2025, 11:00", "18.08.2025, 11:00", "27.08.2025, 11:00"],
        "specialties": {
            "02.04.03": {
                "name": "–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º",
                "budget": 14,
                "target": 0,
                "contract": 50
            }
        }
    }
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã"))
    keyboard.add(types.KeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"))
    keyboard.add(types.KeyboardButton("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É"))
    keyboard.add(types.KeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤"))
    keyboard.add(types.KeyboardButton("–î–∞—Ç—ã —ç–∫–∑–∞–º–µ–Ω–æ–≤"))
    return keyboard

def create_program_choice_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"))
    keyboard.add(types.KeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"))
    keyboard.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    return keyboard

def create_back_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_states[message.chat.id] = {"state": "main"}
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞–º–∏ –ò–¢–ú–û:\n"
        "1. –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç\n"
        "2. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏\n\n"
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥")
def back_to_main(message):
    user_states[message.chat.id] = {"state": "main"}
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
@bot.message_handler(func=lambda message: message.text == "–°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã" and user_states.get(message.chat.id, {}).get("state") == "main")
def compare_programs(message):
    response = "üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º:\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    response += "üìå –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
    for key in ["institute", "form", "duration", "language", "price", "dormitory", "military_center", "accreditation"]:
        ai_val = programs_data["ai"][key]
        ai_product_val = programs_data["ai_product"][key]
        response += f"- {key.replace('_', ' ').title()}: {ai_val} / {ai_product_val}\n"
    
    # –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
    response += "\nüìå –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n"
    response += f"- –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç: {programs_data['ai']['features']}\n"
    response += f"- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏: {programs_data['ai_product']['features']}\n"
    
    # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
    response += "\nüìå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:\n"
    for code, spec in programs_data["ai"]["specialties"].items():
        response += f"- {code} {spec['name']}:\n"
        response += f"  –ë—é–¥–∂–µ—Ç: {spec['budget']} / "
        if code in programs_data["ai_product"]["specialties"]:
            response += f"{programs_data['ai_product']['specialties'][code]['budget']}\n"
        else:
            response += "-\n"
    
    bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda message: message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ" and user_states.get(message.chat.id, {}).get("state") == "main")
def program_info(message):
    user_states[message.chat.id] = {"state": "program_choice"}
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=create_program_choice_keyboard()
    )

@bot.message_handler(func=lambda message: message.text in ["–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏"] and user_states.get(message.chat.id, {}).get("state") == "program_choice")
def show_program_info(message):
    program_key = "ai" if message.text == "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç" else "ai_product"
    program = programs_data[program_key]
    
    response = f"üìö {program['name']}\n\n"
    response += f"üèõ –ò–Ω—Å—Ç–∏—Ç—É—Ç: {program['institute']}\n"
    response += f"üìù –§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: {program['form']}\n"
    response += f"‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {program['duration']}\n"
    response += f"üåê –Ø–∑—ã–∫ –æ–±—É—á–µ–Ω–∏—è: {program['language']}\n"
    response += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {program['price']}\n"
    response += f"üè† –û–±—â–µ–∂–∏—Ç–∏–µ: {program['dormitory']}\n"
    response += f"üéñ –í–æ–µ–Ω–Ω—ã–π —É—á–µ–±–Ω—ã–π —Ü–µ–Ω—Ç—Ä: {program['military_center']}\n"
    response += f"üìú –ì–æ—Å. –∞–∫–∫—Ä–µ–¥–∏—Ç–∞—Ü–∏—è: {program['accreditation']}\n"
    response += f"‚ú® –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {program['features']}\n\n"
    
    response += "üìä –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:\n"
    for code, spec in program["specialties"].items():
        response += f"- {code} {spec['name']}:\n"
        response += f"  üéì –ë—é–¥–∂–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç: {spec['budget']}\n"
        response += f"  üéØ –¶–µ–ª–µ–≤—ã—Ö –º–µ—Å—Ç: {spec['target']}\n"
        response += f"  üíµ –ö–æ–Ω—Ç—Ä–∞–∫—Ç–Ω—ã—Ö –º–µ—Å—Ç: {spec['contract']}\n"
    
    bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda message: message.text == "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É" and user_states.get(message.chat.id, {}).get("state") == "main")
def ask_background(message):
    user_states[message.chat.id] = {"state": "awaiting_background"}
    bot.send_message(
        message.chat.id,
        "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ –∏ –æ–ø—ã—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–£ –º–µ–Ω—è –±–∞–∫–∞–ª–∞–≤—Ä–∏–∞—Ç –ø–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–º –Ω–∞—É–∫–∞–º, –æ–ø—ã—Ç –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏ 1 –≥–æ–¥')",
        reply_markup=create_back_keyboard()
    )

@bot.message_handler(func=lambda message: user_states.get(message.chat.id, {}).get("state") == "awaiting_background")
def provide_recommendation(message):
    background = message.text.lower()
    user_states[message.chat.id] = {"state": "main"}
    
    # –ü—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    if any(word in background for word in ["–º–∞—à–∏–Ω–Ω", "ml", "–Ω–µ–π—Ä–æ–Ω", "deep learning", "–∏–∏", "ai"]):
        recommendation = (
            "üéØ –ò—Å—Ö–æ–¥—è –∏–∑ —Ç–≤–æ–µ–≥–æ –æ–ø—ã—Ç–∞ –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏, —Ç–µ–±–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∞ "
            "'–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –±–æ–ª—å—à–µ —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –ò–ò.\n\n"
            "–û–¥–Ω–∞–∫–æ, –µ—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞—É—á–∏—Ç—å—Å—è —É–ø—Ä–∞–≤–ª—è—Ç—å –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç—å –∏—Ö –Ω–∞ —Ä—ã–Ω–æ–∫, "
            "—Ä–∞—Å—Å–º–æ—Ç—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏'."
        )
    elif any(word in background for word in ["—É–ø—Ä–∞–≤–ª–µ–Ω", "–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç", "product", "–±–∏–∑–Ω–µ—Å", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥"]):
        recommendation = (
            "üéØ –£—á–∏—Ç—ã–≤–∞—è —Ç–≤–æ–π –æ–ø—ã—Ç –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –∏–ª–∏ –±–∏–∑–Ω–µ—Å–µ, –ø—Ä–æ–≥—Ä–∞–º–º–∞ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏' "
            "–º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª—è —Ç–µ–±—è –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —Å–æ—á–µ—Ç–∞–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–Ω–∏—è —Å —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏–º–∏.\n\n"
            "–ï—Å–ª–∏ –∂–µ —Ç—ã —Ö–æ—á–µ—à—å —É–≥–ª—É–±–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã –ò–ò, —Ä–∞—Å—Å–º–æ—Ç—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç'."
        )
    else:
        recommendation = (
            "ü§î –ù–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ç–≤–æ–µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Å–ª–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–æ—á–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é. –í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ —É—á–µ—Å—Ç—å:\n\n"
            "1. '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç' - –±–æ–ª—å—à–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω, –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ\n"
            "2. '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ò–ò-–ø—Ä–æ–¥—É–∫—Ç–∞–º–∏' - –±–æ–ª—å—à–µ –ø—Ä–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏, –≤—ã–≤–æ–¥ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –Ω–∞ —Ä—ã–Ω–æ–∫\n\n"
            "–ü–æ–¥—É–º–∞–π, —á—Ç–æ —Ç–µ–±–µ –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ - —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ò–ò –∏–ª–∏ –µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ –±–∏–∑–Ω–µ—Å–µ."
        )
    
    bot.send_message(
        message.chat.id,
        recommendation,
        reply_markup=create_main_keyboard()
    )

@bot.message_handler(func=lambda message: message.text == "–ö–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤" and user_states.get(message.chat.id, {}).get("state") == "main")
def show_contacts(message):
    response = "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º:\n\n"
    
    for program in ["ai", "ai_product"]:
        manager = programs_data[program]["manager"]
        response += f"üìå {programs_data[program]['name']}:\n"
        response += f"üë§ {manager['name']}\n"
        response += f"üìß {manager['email']}\n"
        response += f"üì± {manager['phone']}\n\n"
    
    bot.send_message(message.chat.id, response)

@bot.message_handler(func=lambda message: message.text == "–î–∞—Ç—ã —ç–∫–∑–∞–º–µ–Ω–æ–≤" and user_states.get(message.chat.id, {}).get("state") == "main")
def show_exam_dates(message):
    response = "üìÖ –î–∞—Ç—ã –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–∫–∑–∞–º–µ–Ω–æ–≤:\n\n"
    
    for program in ["ai", "ai_product"]:
        response += f"üìå {programs_data[program]['name']}:\n"
        for date in programs_data[program]["exam_dates"]:
            response += f"- {date}\n"
        response += "\n"
    
    bot.send_message(message.chat.id, response)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    if user_states.get(message.chat.id, {}).get("state") == "main":
        bot.send_message(
            message.chat.id,
            "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω—è–ª —Ç–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.",
            reply_markup=create_main_keyboard()
        )
    else:
        bot.send_message(
            message.chat.id,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏ '–ù–∞–∑–∞–¥'.",
            reply_markup=create_back_keyboard()
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.infinity_polling()
